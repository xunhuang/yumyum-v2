// source: proto/TockRequests.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.tutorial.TockSearchRequest', null, global);
goog.exportSymbol('proto.tutorial.TockSearchRequest.Request', null, global);
goog.exportSymbol('proto.tutorial.TockSearchRequest.Request.RequestField', null, global);
goog.exportSymbol('proto.tutorial.TockSearchRequest.Request.RequestType', null, global);
goog.exportSymbol('proto.tutorial.TockSearchResponse', null, global);
goog.exportSymbol('proto.tutorial.TockSearchResponse.Response1', null, global);
goog.exportSymbol('proto.tutorial.TockSearchResponse.Response2', null, global);
goog.exportSymbol('proto.tutorial.TockSearchResponse.Response3', null, global);
goog.exportSymbol('proto.tutorial.TockSearchResponse.ResponseRow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.tutorial.TockSearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchRequest.displayName = 'proto.tutorial.TockSearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchRequest.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.TockSearchRequest.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchRequest.Request.displayName = 'proto.tutorial.TockSearchRequest.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchRequest.Request.RequestField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.TockSearchRequest.Request.RequestField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchRequest.Request.RequestField.displayName = 'proto.tutorial.TockSearchRequest.Request.RequestField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.TockSearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchResponse.displayName = 'proto.tutorial.TockSearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchResponse.ResponseRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.TockSearchResponse.ResponseRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchResponse.ResponseRow.displayName = 'proto.tutorial.TockSearchResponse.ResponseRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchResponse.Response3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tutorial.TockSearchResponse.Response3.repeatedFields_, null);
};
goog.inherits(proto.tutorial.TockSearchResponse.Response3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchResponse.Response3.displayName = 'proto.tutorial.TockSearchResponse.Response3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchResponse.Response2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.tutorial.TockSearchResponse.Response2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchResponse.Response2.displayName = 'proto.tutorial.TockSearchResponse.Response2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.TockSearchResponse.Response1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.TockSearchResponse.Response1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.TockSearchResponse.Response1.displayName = 'proto.tutorial.TockSearchResponse.Response1';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.tutorial.TockSearchRequest.Request.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchRequest}
 */
proto.tutorial.TockSearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchRequest;
  return proto.tutorial.TockSearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchRequest}
 */
proto.tutorial.TockSearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 60332:
      var value = new proto.tutorial.TockSearchRequest.Request;
      reader.readMessage(value,proto.tutorial.TockSearchRequest.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      60332,
      f,
      proto.tutorial.TockSearchRequest.Request.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchRequest.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchRequest.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchRequest.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchRequest.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requesttype: (f = msg.getRequesttype()) && proto.tutorial.TockSearchRequest.Request.RequestField.toObject(includeInstance, f),
    latitude: jspb.Message.getFieldWithDefault(msg, 4, 0),
    longitude: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchRequest.Request}
 */
proto.tutorial.TockSearchRequest.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchRequest.Request;
  return proto.tutorial.TockSearchRequest.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchRequest.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchRequest.Request}
 */
proto.tutorial.TockSearchRequest.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.tutorial.TockSearchRequest.Request.RequestField;
      reader.readMessage(value,proto.tutorial.TockSearchRequest.Request.RequestField.deserializeBinaryFromReader);
      msg.setRequesttype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setLatitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchRequest.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchRequest.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchRequest.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchRequest.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequesttype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tutorial.TockSearchRequest.Request.RequestField.serializeBinaryToWriter
    );
  }
  f = message.getLatitude();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0) {
    writer.writeFixed64(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tutorial.TockSearchRequest.Request.RequestType = {
  NOTWORK: 0,
  THISWORKS: 20
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchRequest.Request.RequestField.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchRequest.Request.RequestField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchRequest.Request.RequestField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchRequest.Request.RequestField.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchRequest.Request.RequestField}
 */
proto.tutorial.TockSearchRequest.Request.RequestField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchRequest.Request.RequestField;
  return proto.tutorial.TockSearchRequest.Request.RequestField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchRequest.Request.RequestField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchRequest.Request.RequestField}
 */
proto.tutorial.TockSearchRequest.Request.RequestField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tutorial.TockSearchRequest.Request.RequestType} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchRequest.Request.RequestField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchRequest.Request.RequestField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchRequest.Request.RequestField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchRequest.Request.RequestField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional RequestType requestType = 1;
 * @return {!proto.tutorial.TockSearchRequest.Request.RequestType}
 */
proto.tutorial.TockSearchRequest.Request.RequestField.prototype.getRequesttype = function() {
  return /** @type {!proto.tutorial.TockSearchRequest.Request.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tutorial.TockSearchRequest.Request.RequestType} value
 * @return {!proto.tutorial.TockSearchRequest.Request.RequestField} returns this
 */
proto.tutorial.TockSearchRequest.Request.RequestField.prototype.setRequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tutorial.TockSearchRequest.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchRequest.Request} returns this
 */
proto.tutorial.TockSearchRequest.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RequestField requestType = 3;
 * @return {?proto.tutorial.TockSearchRequest.Request.RequestField}
 */
proto.tutorial.TockSearchRequest.Request.prototype.getRequesttype = function() {
  return /** @type{?proto.tutorial.TockSearchRequest.Request.RequestField} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.TockSearchRequest.Request.RequestField, 3));
};


/**
 * @param {?proto.tutorial.TockSearchRequest.Request.RequestField|undefined} value
 * @return {!proto.tutorial.TockSearchRequest.Request} returns this
*/
proto.tutorial.TockSearchRequest.Request.prototype.setRequesttype = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.TockSearchRequest.Request} returns this
 */
proto.tutorial.TockSearchRequest.Request.prototype.clearRequesttype = function() {
  return this.setRequesttype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchRequest.Request.prototype.hasRequesttype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional fixed64 latitude = 4;
 * @return {number}
 */
proto.tutorial.TockSearchRequest.Request.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.TockSearchRequest.Request} returns this
 */
proto.tutorial.TockSearchRequest.Request.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed64 longitude = 5;
 * @return {number}
 */
proto.tutorial.TockSearchRequest.Request.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.TockSearchRequest.Request} returns this
 */
proto.tutorial.TockSearchRequest.Request.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Request request = 60332;
 * @return {?proto.tutorial.TockSearchRequest.Request}
 */
proto.tutorial.TockSearchRequest.prototype.getRequest = function() {
  return /** @type{?proto.tutorial.TockSearchRequest.Request} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.TockSearchRequest.Request, 60332));
};


/**
 * @param {?proto.tutorial.TockSearchRequest.Request|undefined} value
 * @return {!proto.tutorial.TockSearchRequest} returns this
*/
proto.tutorial.TockSearchRequest.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 60332, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.TockSearchRequest} returns this
 */
proto.tutorial.TockSearchRequest.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 60332) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    r1: (f = msg.getR1()) && proto.tutorial.TockSearchResponse.Response1.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchResponse}
 */
proto.tutorial.TockSearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchResponse;
  return proto.tutorial.TockSearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchResponse}
 */
proto.tutorial.TockSearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tutorial.TockSearchResponse.Response1;
      reader.readMessage(value,proto.tutorial.TockSearchResponse.Response1.deserializeBinaryFromReader);
      msg.setR1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tutorial.TockSearchResponse.Response1.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchResponse.ResponseRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchResponse.ResponseRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.ResponseRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    city: jspb.Message.getFieldWithDefault(msg, 4, ""),
    state: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, ""),
    unknownField: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow}
 */
proto.tutorial.TockSearchResponse.ResponseRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchResponse.ResponseRow;
  return proto.tutorial.TockSearchResponse.ResponseRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchResponse.ResponseRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow}
 */
proto.tutorial.TockSearchResponse.ResponseRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnknownField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchResponse.ResponseRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchResponse.ResponseRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.ResponseRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.setSlug = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.clearSlug = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.hasSlug = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string city = 4;
 * @return {string}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.setCity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.clearCity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.hasCity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string state = 5;
 * @return {string}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.setState = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.clearState = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.hasState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.setCountry = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.clearCountry = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string unknown_field = 7;
 * @return {string}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.getUnknownField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.setUnknownField = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow} returns this
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.clearUnknownField = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.ResponseRow.prototype.hasUnknownField = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tutorial.TockSearchResponse.Response3.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchResponse.Response3.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchResponse.Response3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchResponse.Response3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.Response3.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchresultsList: jspb.Message.toObjectList(msg.getSearchresultsList(),
    proto.tutorial.TockSearchResponse.ResponseRow.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchResponse.Response3}
 */
proto.tutorial.TockSearchResponse.Response3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchResponse.Response3;
  return proto.tutorial.TockSearchResponse.Response3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchResponse.Response3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchResponse.Response3}
 */
proto.tutorial.TockSearchResponse.Response3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tutorial.TockSearchResponse.ResponseRow;
      reader.readMessage(value,proto.tutorial.TockSearchResponse.ResponseRow.deserializeBinaryFromReader);
      msg.addSearchresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchResponse.Response3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchResponse.Response3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchResponse.Response3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.Response3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tutorial.TockSearchResponse.ResponseRow.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResponseRow searchResults = 1;
 * @return {!Array<!proto.tutorial.TockSearchResponse.ResponseRow>}
 */
proto.tutorial.TockSearchResponse.Response3.prototype.getSearchresultsList = function() {
  return /** @type{!Array<!proto.tutorial.TockSearchResponse.ResponseRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.TockSearchResponse.ResponseRow, 1));
};


/**
 * @param {!Array<!proto.tutorial.TockSearchResponse.ResponseRow>} value
 * @return {!proto.tutorial.TockSearchResponse.Response3} returns this
*/
proto.tutorial.TockSearchResponse.Response3.prototype.setSearchresultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tutorial.TockSearchResponse.ResponseRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.TockSearchResponse.ResponseRow}
 */
proto.tutorial.TockSearchResponse.Response3.prototype.addSearchresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tutorial.TockSearchResponse.ResponseRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.TockSearchResponse.Response3} returns this
 */
proto.tutorial.TockSearchResponse.Response3.prototype.clearSearchresultsList = function() {
  return this.setSearchresultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchResponse.Response2.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchResponse.Response2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchResponse.Response2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.Response2.toObject = function(includeInstance, msg) {
  var f, obj = {
    r3: (f = msg.getR3()) && proto.tutorial.TockSearchResponse.Response3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchResponse.Response2}
 */
proto.tutorial.TockSearchResponse.Response2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchResponse.Response2;
  return proto.tutorial.TockSearchResponse.Response2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchResponse.Response2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchResponse.Response2}
 */
proto.tutorial.TockSearchResponse.Response2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 60333:
      var value = new proto.tutorial.TockSearchResponse.Response3;
      reader.readMessage(value,proto.tutorial.TockSearchResponse.Response3.deserializeBinaryFromReader);
      msg.setR3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchResponse.Response2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchResponse.Response2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchResponse.Response2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.Response2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR3();
  if (f != null) {
    writer.writeMessage(
      60333,
      f,
      proto.tutorial.TockSearchResponse.Response3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response3 r3 = 60333;
 * @return {?proto.tutorial.TockSearchResponse.Response3}
 */
proto.tutorial.TockSearchResponse.Response2.prototype.getR3 = function() {
  return /** @type{?proto.tutorial.TockSearchResponse.Response3} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.TockSearchResponse.Response3, 60333));
};


/**
 * @param {?proto.tutorial.TockSearchResponse.Response3|undefined} value
 * @return {!proto.tutorial.TockSearchResponse.Response2} returns this
*/
proto.tutorial.TockSearchResponse.Response2.prototype.setR3 = function(value) {
  return jspb.Message.setWrapperField(this, 60333, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.Response2} returns this
 */
proto.tutorial.TockSearchResponse.Response2.prototype.clearR3 = function() {
  return this.setR3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.Response2.prototype.hasR3 = function() {
  return jspb.Message.getField(this, 60333) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.TockSearchResponse.Response1.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.TockSearchResponse.Response1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.TockSearchResponse.Response1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.Response1.toObject = function(includeInstance, msg) {
  var f, obj = {
    r2: (f = msg.getR2()) && proto.tutorial.TockSearchResponse.Response2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.TockSearchResponse.Response1}
 */
proto.tutorial.TockSearchResponse.Response1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.TockSearchResponse.Response1;
  return proto.tutorial.TockSearchResponse.Response1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.TockSearchResponse.Response1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.TockSearchResponse.Response1}
 */
proto.tutorial.TockSearchResponse.Response1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tutorial.TockSearchResponse.Response2;
      reader.readMessage(value,proto.tutorial.TockSearchResponse.Response2.deserializeBinaryFromReader);
      msg.setR2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.TockSearchResponse.Response1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.TockSearchResponse.Response1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.TockSearchResponse.Response1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.TockSearchResponse.Response1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR2();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tutorial.TockSearchResponse.Response2.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response2 r2 = 1;
 * @return {?proto.tutorial.TockSearchResponse.Response2}
 */
proto.tutorial.TockSearchResponse.Response1.prototype.getR2 = function() {
  return /** @type{?proto.tutorial.TockSearchResponse.Response2} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.TockSearchResponse.Response2, 1));
};


/**
 * @param {?proto.tutorial.TockSearchResponse.Response2|undefined} value
 * @return {!proto.tutorial.TockSearchResponse.Response1} returns this
*/
proto.tutorial.TockSearchResponse.Response1.prototype.setR2 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse.Response1} returns this
 */
proto.tutorial.TockSearchResponse.Response1.prototype.clearR2 = function() {
  return this.setR2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.Response1.prototype.hasR2 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response1 r1 = 1;
 * @return {?proto.tutorial.TockSearchResponse.Response1}
 */
proto.tutorial.TockSearchResponse.prototype.getR1 = function() {
  return /** @type{?proto.tutorial.TockSearchResponse.Response1} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.TockSearchResponse.Response1, 1));
};


/**
 * @param {?proto.tutorial.TockSearchResponse.Response1|undefined} value
 * @return {!proto.tutorial.TockSearchResponse} returns this
*/
proto.tutorial.TockSearchResponse.prototype.setR1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.TockSearchResponse} returns this
 */
proto.tutorial.TockSearchResponse.prototype.clearR1 = function() {
  return this.setR1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.TockSearchResponse.prototype.hasR1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.tutorial);
